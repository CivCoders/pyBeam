import numpy as np
import beam
from matplotlib.offsetbox import AnnotationBbox, OffsetImage
from matplotlib._png import read_png
import matplotlib.pyplot as plt

def calculateReactions(my_beam):
	force_LHS=[]
	moment_LHS=[]
	sum_loads=0
	moment_loads=0
	for position in my_beam.SUPPORTS:
		force_LHS.append(1)
		moment_LHS.append(position)
	for position in my_beam.LOADS:
		sum_loads+=my_beam.LOADS[position]
		moment_loads+=position*my_beam.LOADS[position]
	LHS=np.array([force_LHS,moment_LHS])
	RHS=np.array([sum_loads,moment_loads])
	reactions=np.linalg.solve(LHS,RHS)
	reaction_index=0
	print "---------\nReactions\n---------"
	for position in my_beam.SUPPORTS:
		my_beam.VERTICAL_REACTIONS[position]=reactions[reaction_index]
		reaction_index+=1
	for position in my_beam.VERTICAL_REACTIONS:
		print "Reaction at "+str(position)+" is "+str(my_beam.VERTICAL_REACTIONS[position])
	plot(my_beam)
	return

def forceAtX(my_beam,x):
	if x<0:
		return 0
	v=0
	for position in my_beam.VERTICAL_REACTIONS:
		if position<=x:
			v-=my_beam.VERTICAL_REACTIONS[position]
	for position in my_beam.LOADS:
		if position>x:
			return v
		v+=my_beam.LOADS[position]
	return v

def plot_shear(my_beam):
	x=np.arange(-0.000099,my_beam.BEAM_LENGTH+0.001,0.001)
	y=[]
	for i in x:
		y.append(forceAtX(my_beam,i))
	supp_pos=[]
	supp_base=[]
	for i in my_beam.VERTICAL_REACTIONS:
		supp_pos.append(i)
		supp_base.append(0)
		print i
	
	plt.xlim(-my_beam.BEAM_LENGTH/2,my_beam.BEAM_LENGTH*3/2)
	plt.plot(supp_pos,supp_base,'^')
	plt.plot(x,x*0,'b--')
	plt.plot(x,y,'r')
	plt.show()
